import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  // „ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÅÆ‰Ωú

  // „É¶„Éº„Ç∂„Éº„ÅÆ‰ΩúÊàê
  const users = await Promise.all([
    prisma.users.create({
      data: {
        name: "„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº1",
        password: "password123",
        email: "test1@example.com",
        gender: "male",
        profile_url: "https://example.com/profile1.jpg",
        status: "active",
        birthday: new Date("1990-01-01"),
        my_id: "user1",
      },
    }),
    prisma.users.create({
      data: {
        name: "„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº2",
        password: "password123",
        email: "test2@example.com",
        gender: "female",
        profile_url: "https://example.com/profile2.jpg",
        status: "active",
        birthday: new Date("1995-02-15"),
        my_id: "user2",
      },
    }),
  ]);

  const posts = [];
  for (let i = 0; i < 15; i++) {
    const post = await prisma.posts.create({
      data: {
        user_id: users[0].id,
        title: `„ÉÜ„Çπ„ÉàÊäïÁ®ø${i + 1}`,
        description: `„ÉÜ„Çπ„ÉàÊäïÁ®ø${i + 1}„ÅÆË™¨Êòé„Åß„Åô„ÄÇ`,
        images: {
          create: {
            url: `https://example.com/image${i + 1}.jpg`,
          },
        },
      },
    });
    posts.push(post);
  }

  const xPosts = [];
  for (let i = 0; i < 15; i++) {
    const post = await prisma.posts.create({
      data: {
        user_id: users[0].id,
        title: `„ÉÜ„Çπ„ÉàÊäïÁ®ø${i + 1}`,
        description: `„ÉÜ„Çπ„ÉàÊäïÁ®ø${i + 1}„ÅÆË™¨Êòé„Åß„Åô„ÄÇ`,
        images: {
          create: {
            url: `https://example.com/image${i + 1}.jpg`,
          },
        },
        is_posted_x: true,
      },
    });
    xPosts.push(post);
  }

  // ÊäïÁ®ø„ÅÆ‰ΩúÊàê
  const likes = await Promise.all(
    posts.map((post) =>
      prisma.likes.create({
        data: {
          post_id: post.id,
          user_id: users[1].id, // „É¶„Éº„Ç∂„Éº2„ÅåÂÖ®„Å¶„ÅÆÊäïÁ®ø„Å´„ÅÑ„ÅÑ„Å≠„Åô„ÇãÂ†¥Âêà
          posted_user_id: post.user_id,
        },
      })
    )
  );

  // ÂÖ®„Å¶„ÅÆÊäïÁ®ø„Å´„É©„É≥„ÉÄ„É†„Åß„Çø„Ç∞‰ªò„Åë„Å¶„Åä„Åè
  const tagPromises = Array.from({ length: 10 }, (_, i) =>
    prisma.tags.create({
      data: { name: `„Çø„Ç∞${i + 1}` },
    })
  );
  const tags = await Promise.all(tagPromises); // ‚úÖ Promise.all „Åß‰∏¶ÂàóÂá¶ÁêÜ
  
  // üîπ ‚ë° ÂÖ®„Å¶„ÅÆÊäïÁ®ø„Å´„É©„É≥„ÉÄ„É†„Åß„Çø„Ç∞„Çí‰ªò‰∏é
  const taggings = posts.map((post, i) =>
    prisma.post_tags.create({
      data: {
        post_id: post.id,
        tag_id: tags[i % tags.length].id, // ‚úÖ `i % tags.length` „ÅßÁØÑÂõ≤Â§ñ„Ç®„É©„ÉºÈò≤Ê≠¢
      },
    })
  );
  
  await Promise.all(taggings); 

  

  // notifications„Å®notification_types„ÅÆ‰ΩúÊàê
  const notifications = await Promise.all([
    prisma.notifications.create({
      data: {
        title: "„ÅäÁü•„Çâ„Åõ1",
        content: "„ÅäÁü•„Çâ„Åõ1„Åß„Åô",
        notification_type: "release",
        published_at: new Date(),
        user: {
          connect: { id: users[0].id },
        },
      },
    }),
    prisma.notifications.create({
      data: {
        title: "„ÅäÁü•„Çâ„Åõ2",
        content: "„ÅäÁü•„Çâ„Åõ2„Åß„Åô",
        notification_type: "important",
        published_at: new Date(),
        user: {
          connect: { id: users[1].id },
        },
      },
    }),
  ]);

  console.log("Seed data created:", { users, posts, notifications, likes });
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
